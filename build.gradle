plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'

    // Rest Docs
    id 'org.asciidoctor.jvm.convert' version '3.3.2'

    // SpringDoc OpenAPI (Swagger)
    id 'com.epages.restdocs-api-spec' version '0.17.1'
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.devty'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

ext {
    snippetsDir = file('build/generated-snippets') // 스니펫 디렉토리 설정
}

// 환경 변수 설정: 'dev', 'local', 'prod'
def env = project.findProperty('env')
def isLocalOrDev = env == 'local' || env == 'dev'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Spring Data MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // Rest Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // SpringDoc OpenAPI (Swagger)
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.17.1'
    swaggerUI 'org.webjars:swagger-ui:4.11.1'
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir // 생성된 snippets을 지정된 경로 저장
}

tasks.register('restDocsTest', Test) {
    outputs.dir snippetsDir
    useJUnitPlatform {
        includeTags 'restDocs'
    }
}

if (isLocalOrDev) {
    asciidoctor {
        dependsOn 'test', 'restDocsTest'
        inputs.dir snippetsDir
        configurations 'asciidoctorExt'
        baseDirFollowsSourceDir()
    }

    openapi3 {
        servers = [
                { url = 'http://localhost:8080' },
        ]
        title = 'spring-starter-kit'
        description = 'spring-starter-kit document swagger ui'
        version = "${project.version}"
        format = 'json'
        outputFileNamePrefix = 'openapi3' // 생성될 스펙 파일의 이름 설정
    }

    swaggerSources {
        sample {
            inputFile = file("${buildDir}/api-spec/openapi3.json") // OpenAPI 스펙 파일 경로

            ui {
                outputDir = file("${buildDir}/swagger-ui") // Swagger UI 파일들이 생성될 위치를 지정합니다.
            }
        }
    }

    // GenerateSwaggerUI 태스크가 openapi3 태스크에 의존하도록 설정
    tasks.named('generateSwaggerUISample', GenerateSwaggerUI) {
        dependsOn 'openapi3'
    }
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // 중복 파일 처리 전략 설정

    if (isLocalOrDev) {
        dependsOn 'asciidoctor' // asciidoctor후 실행
        dependsOn 'generateSwaggerUISample' //Swagger UI 생성 후 실행

        // Swagger UI 파일들을 포함
        from("${buildDir}/swagger-ui") {
            into 'BOOT-INF/classes/static/swagger-ui'
        }

        // OpenAPI 스펙 파일 포함
        from("${buildDir}/api-spec") {
            into 'BOOT-INF/classes/static/swagger-ui'
        }

        // Asciidoctor로 생성된 문서 포함
        from("${asciidoctor.outputDir}") {
            into 'BOOT-INF/classes/static/docs'
        }
    }
}